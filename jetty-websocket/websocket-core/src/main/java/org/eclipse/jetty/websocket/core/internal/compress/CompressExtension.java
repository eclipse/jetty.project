//
//  ========================================================================
//  Copyright (c) 1995-2019 Mort Bay Consulting Pty. Ltd.
//  ------------------------------------------------------------------------
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
//

package org.eclipse.jetty.websocket.core.internal.compress;

import java.nio.ByteBuffer;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.zip.DataFormatException;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import java.util.zip.ZipException;

import org.eclipse.jetty.util.BufferUtil;
import org.eclipse.jetty.util.Callback;
import org.eclipse.jetty.util.IteratingCallback;
import org.eclipse.jetty.util.log.Log;
import org.eclipse.jetty.util.log.Logger;
import org.eclipse.jetty.websocket.core.AbstractExtension;
import org.eclipse.jetty.websocket.core.Frame;
import org.eclipse.jetty.websocket.core.MessageTooLargeException;
import org.eclipse.jetty.websocket.core.OpCode;
import org.eclipse.jetty.websocket.core.internal.FrameEntry;

public abstract class CompressExtension extends AbstractExtension
{
    protected static final byte[] TAIL_BYTES = new byte[]{0x00, 0x00, (byte)0xFF, (byte)0xFF};
    protected static final ByteBuffer TAIL_BYTES_BUF = ByteBuffer.wrap(TAIL_BYTES);
    private static final Logger LOG = Log.getLogger(CompressExtension.class);

    /**
     * Never drop tail bytes 0000FFFF, from any frame type
     */
    protected static final int TAIL_DROP_NEVER = 0;
    /**
     * Always drop tail bytes 0000FFFF, from all frame types
     */
    protected static final int TAIL_DROP_ALWAYS = 1;
    /**
     * Only drop tail bytes 0000FFFF, from fin==true frames
     */
    protected static final int TAIL_DROP_FIN_ONLY = 2;

    /**
     * Always set RSV flag, on all frame types
     */
    protected static final int RSV_USE_ALWAYS = 0;
    /**
     * Only set RSV flag on first frame in multi-frame messages.
     * <p>
     * Note: this automatically means no-continuation frames have the RSV bit set
     */
    protected static final int RSV_USE_ONLY_FIRST = 1;

    /**
     * Inflater / Decompressed Buffer Size
     */
    protected static final int INFLATE_BUFFER_SIZE = 8 * 1024;

    /**
     * Deflater / Inflater: Maximum Input Buffer Size
     */
    protected static final int INPUT_MAX_BUFFER_SIZE = 8 * 1024;

    /**
     * Inflater : Output Buffer Size
     */
    private static final int DECOMPRESS_BUF_SIZE = 8 * 1024;

    private final Queue<FrameEntry> entries = new ArrayDeque<>();
    private final IteratingCallback flusher = new Flusher();
    private Deflater deflaterImpl;
    private Inflater inflaterImpl;
    protected AtomicInteger decompressCount = new AtomicInteger(0);
    private int tailDrop;
    private int rsvUse;

    protected CompressExtension()
    {
        tailDrop = getTailDropMode();
        rsvUse = getRsvUseMode();
    }

    public Deflater getDeflater()
    {
        if (deflaterImpl == null)
            deflaterImpl = getDeflaterPool().acquire();
        return deflaterImpl;
    }

    public Inflater getInflater()
    {
        if (inflaterImpl == null)
            inflaterImpl = getInflaterPool().acquire();
        return inflaterImpl;
    }

    public void releaseInflater()
    {
        getInflaterPool().release(inflaterImpl);
        inflaterImpl = null;
    }

    public void releaseDeflater()
    {
        getDeflaterPool().release(deflaterImpl);
        deflaterImpl = null;
    }

    /**
     * Indicates use of RSV1 flag for indicating deflation is in use.
     */
    @Override
    public boolean isRsv1User()
    {
        return true;
    }

    /**
     * Return the mode of operation for dropping (or keeping) tail bytes in frames generated by compress (outgoing)
     *
     * @return either {@link #TAIL_DROP_ALWAYS}, {@link #TAIL_DROP_FIN_ONLY}, or {@link #TAIL_DROP_NEVER}
     */
    abstract int getTailDropMode();

    /**
     * Return the mode of operation for RSV flag use in frames generate by compress (outgoing)
     *
     * @return either {@link #RSV_USE_ALWAYS} or {@link #RSV_USE_ONLY_FIRST}
     */
    abstract int getRsvUseMode();

    protected void forwardIncoming(Frame frame, Callback callback, ByteAccumulator accumulator)
    {
        // Copy frame and unset RSV1 since it's not compressed anymore.
        Frame newFrame = Frame.copyWithoutPayload(frame);
        newFrame.setRsv1(false);

        // Move the payload to a large enough buffer.
        ByteBuffer buffer = accumulator.getBytes();
        newFrame.setPayload(buffer);
        nextIncomingFrame(newFrame, callback);
    }

    protected void decompress(ByteAccumulator accumulator, ByteBuffer buf) throws DataFormatException
    {
        if ((buf == null) || (!buf.hasRemaining()))
            return;

        Inflater inflater = getInflater();
        inflater.setInput(buf);

        while (true)
        {
            ByteBuffer output = getBufferPool().acquire(DECOMPRESS_BUF_SIZE, false);
            BufferUtil.clearToFill(output);
            int read = inflater.inflate(output); // todo cannot restrict size with bytebuffer
            BufferUtil.flipToFlush(output, 0);
            if (LOG.isDebugEnabled())
                LOG.debug("Decompress: read {} {}", read, toDetail(inflater));

            if (read <= 0)
            {
                getBufferPool().release(output);
                break;
            }

            accumulator.addChunk(output);
        }

        if (LOG.isDebugEnabled())
            LOG.debug("Decompress: exiting {}", toDetail(inflater));
    }

    private boolean transform(Frame frame, Callback callback, boolean batch, boolean first)
    {
        // Do not deflate control frames
        if (OpCode.isControlFrame(frame.getOpCode()))
        {
            nextOutgoingFrame(frame, callback, batch);
            return true;
        }

        return compress(frame, callback, batch, first);
    }

    private boolean compress(Frame frame, Callback callback, boolean batch, boolean first)
    {
        // Get a chunk of the payload to avoid to blow
        // the heap if the payload is a huge mapped file.
        ByteBuffer data = frame.getPayload();
        int remaining = data.remaining();
        int outputLength = Math.max(256, data.remaining());
        long maxFrameSize = getWebSocketCoreSession().getMaxFrameSize();
        if (LOG.isDebugEnabled())
            LOG.debug("Compressing {}: {} bytes in {} bytes chunk", frame, remaining, outputLength);

        // Get Deflater and provide payload as input if this is the first time.
        Deflater deflater = getDeflater();
        if (first)
            deflater.setInput(data);

        // Compress the payload.
        boolean finished = false;
        ByteAccumulator accumulator = new ByteAccumulator(getWebSocketCoreSession().getMaxFrameSize());
        while (true)
        {
            int bufferSize = DECOMPRESS_BUF_SIZE;
            if (maxFrameSize > 0)
                bufferSize = (int)Math.min(maxFrameSize - accumulator.size(), DECOMPRESS_BUF_SIZE);

            byte[] output = new byte[bufferSize];
            int compressed = deflater.deflate(output, 0, output.length, Deflater.SYNC_FLUSH);
            if (LOG.isDebugEnabled())
                LOG.debug("Compressed {} bytes", compressed);

            if (compressed <= 0)
            {
                finished = true;
                break;
            }

            accumulator.addChunk(BufferUtil.toBuffer(output, 0, compressed));

            if (maxFrameSize > 0 && accumulator.size() == maxFrameSize)
            {
                if (!getWebSocketCoreSession().isAutoFragment())
                    throw new MessageTooLargeException("Deflated payload exceeded maxFrameSize");
                break;
            }
        }

        ByteBuffer payload = accumulator.getBytes();
        if (payload.remaining() > 0)
        {
            // Handle tail bytes generated by SYNC_FLUSH.
            if (LOG.isDebugEnabled())
                LOG.debug("compressed[] bytes = {}", BufferUtil.toDetailString(payload));

            if (tailDrop == TAIL_DROP_ALWAYS)
            {
                if (endsWithTail(payload))
                {
                    payload.limit(payload.limit() - TAIL_BYTES.length);
                    if (LOG.isDebugEnabled())
                        LOG.debug("payload (TAIL_DROP_ALWAYS) = {}", BufferUtil.toDetailString(payload));
                }
            }
            else if (tailDrop == TAIL_DROP_FIN_ONLY)
            {
                if (finished && frame.isFin() && endsWithTail(payload))
                {
                    payload.limit(payload.limit() - TAIL_BYTES.length);
                    if (LOG.isDebugEnabled())
                        LOG.debug("payload (TAIL_DROP_FIN_ONLY) = {}", BufferUtil.toDetailString(payload));
                }
            }
        }
        else if (frame.isFin())
        {
            // Special case: 7.2.3.6.  Generating an Empty Fragment Manually
            // https://tools.ietf.org/html/rfc7692#section-7.2.3.6
            payload = ByteBuffer.wrap(new byte[]{0x00});
        }

        if (LOG.isDebugEnabled())
            LOG.debug("Compressed {}: input:{} -> payload:{}", frame, outputLength, payload.remaining());

        Frame chunk = new Frame(first ? frame.getOpCode() : OpCode.CONTINUATION);
        chunk.setRsv1(first || rsvUse != RSV_USE_ONLY_FIRST);
        chunk.setPayload(payload);
        chunk.setFin(frame.isFin() && finished);

        nextOutgoingFrame(chunk, callback, batch);
        return finished;
    }

    @Override
    public void sendFrame(Frame frame, Callback callback, boolean batch)
    {
        // We use a queue and an IteratingCallback to handle concurrency.
        // We must compress and write atomically, otherwise the compression
        // context on the other end gets confused.

        if (flusher.isFailed())
        {
            notifyCallbackFailure(callback, new ZipException());
            return;
        }

        FrameEntry entry = new FrameEntry(frame, callback, batch);
        if (LOG.isDebugEnabled())
            LOG.debug("Queuing {}", entry);
        offerEntry(entry);
        flusher.iterate();
    }

    private void offerEntry(FrameEntry entry)
    {
        synchronized (this)
        {
            entries.offer(entry);
        }
    }

    private FrameEntry pollEntry()
    {
        synchronized (this)
        {
            return entries.poll();
        }
    }

    protected void notifyCallbackSuccess(Callback callback)
    {
        try
        {
            if (callback != null)
                callback.succeeded();
        }
        catch (Throwable x)
        {
            if (LOG.isDebugEnabled())
                LOG.debug("Exception while notifying success of callback " + callback, x);
        }
    }

    protected void notifyCallbackFailure(Callback callback, Throwable failure)
    {
        try
        {
            if (callback != null)
                callback.failed(failure);
        }
        catch (Throwable x)
        {
            if (LOG.isDebugEnabled())
                LOG.debug("Exception while notifying failure of callback " + callback, x);
        }
    }

    private static String toDetail(Inflater inflater)
    {
        return String.format("Inflater[finished=%b,read=%d,written=%d,remaining=%d,in=%d,out=%d]", inflater.finished(), inflater.getBytesRead(),
            inflater.getBytesWritten(), inflater.getRemaining(), inflater.getTotalIn(), inflater.getTotalOut());
    }

    private static String toDetail(Deflater deflater)
    {
        return String.format("Deflater[finished=%b,read=%d,written=%d,in=%d,out=%d]", deflater.finished(), deflater.getBytesRead(), deflater.getBytesWritten(),
            deflater.getTotalIn(), deflater.getTotalOut());
    }

    public static boolean endsWithTail(ByteBuffer buf)
    {
        if ((buf == null) || (buf.remaining() < TAIL_BYTES.length))
        {
            return false;
        }
        int limit = buf.limit();
        for (int i = TAIL_BYTES.length; i > 0; i--)
        {
            if (buf.get(limit - i) != TAIL_BYTES[TAIL_BYTES.length - i])
            {
                return false;
            }
        }
        return true;
    }

    @Override
    public String toString()
    {
        return getClass().getSimpleName();
    }

    private class Flusher extends IteratingCallback
    {
        private FrameEntry current;
        private boolean finished = true;

        @Override
        public void succeeded()
        {
            if (finished)
                notifyCallbackSuccess(current.callback);
            super.succeeded();
        }

        @Override
        public void failed(Throwable cause)
        {
            releaseInflater();
            releaseDeflater();
            notifyCallbackFailure(current.callback, cause);
            // If something went wrong, very likely the compression context
            // will be invalid, so we need to fail this IteratingCallback.
            LOG.warn(cause);
            super.failed(cause);
        }

        @Override
        protected Action process() throws Exception
        {
            if (finished)
            {
                current = pollEntry();
                LOG.debug("Processing {}", current);
                if (current == null)
                    return Action.IDLE;
            }

            finished = transform(current.frame, this, current.batch, finished);
            return Action.SCHEDULED;
        }

        @Override
        protected void onCompleteSuccess()
        {
            // This IteratingCallback never completes.
        }

        @Override
        protected void onCompleteFailure(Throwable x)
        {
            // Fail all the frames in the queue.
            FrameEntry entry;
            while ((entry = pollEntry()) != null)
            {
                notifyCallbackFailure(entry.callback, x);
            }
        }
    }
}
