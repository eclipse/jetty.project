//
//  ========================================================================
//  Copyright (c) 1995-2018 Mort Bay Consulting Pty. Ltd.
//  ------------------------------------------------------------------------
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
//

package org.eclipse.jetty.websocket.jsr356;

import org.eclipse.jetty.websocket.jsr356.sockets.TrackingSocket;
import org.hamcrest.Matcher;
import org.junit.jupiter.api.Test;

import javax.websocket.ClientEndpoint;
import javax.websocket.OnOpen;
import javax.websocket.Session;
import java.util.concurrent.TimeUnit;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.allOf;
import static org.hamcrest.Matchers.containsString;

public class JavaxWebSocketFrameHandler_OnOpenTest extends AbstractJavaxWebSocketFrameHandlerTest
{
    private void assertOnOpenInvocation(TrackingSocket socket, Matcher<String> eventMatcher) throws Exception
    {
        JavaxWebSocketFrameHandler localEndpoint = newJavaxFrameHandler(socket);

        // This invocation is the same for all tests
        localEndpoint.onOpen(channel);
        String event = socket.events.poll(1, TimeUnit.SECONDS);
        assertThat("Event", event, eventMatcher);
    }

    @ClientEndpoint
    public static class OpenSocket extends TrackingSocket
    {
        @OnOpen
        public void onOpen()
        {
            addEvent("onOpen()");
        }
    }

    @Test
    public void testInvokeOpen() throws Exception
    {
        assertOnOpenInvocation(new OpenSocket(), containsString("onOpen()"));
    }

    @ClientEndpoint
    public static class OpenSessionSocket extends TrackingSocket
    {
        @OnOpen
        public void onOpen(Session session)
        {
            addEvent("onOpen(%s)", session);
        }
    }

    @Test
    public void testInvokeOpenSession() throws Exception
    {
        assertOnOpenInvocation(new OpenSessionSocket(),
                allOf(
                    containsString("onOpen(JavaxWebSocketSession"),
                    containsString(OpenSessionSocket.class.getName())
                ));
    }
}
